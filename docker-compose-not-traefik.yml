
services:
    
  db:
    container_name: "db_without_traefik"
    image: "postgres:17"
    restart: unless-stopped
    env_file:
      - .env
    environment:
      - POSTGRES_DB=${DB_NAME}
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_PASSWORD=${DB_PASS}
    ports:
      #Здесь возможно будет лучше поменять на "5433:${DB_PORT}", так как на сервере может быть 5432 уже быть занят другой POSTGRES
      - "${DB_PORT}:${DB_PORT}" 
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    volumes:
      - pg_project:/var/lib/postgresql/data

  adminservice:
    build:
      context: ./backend/adminService
    env_file:
      - ./backend/.env
    environment:
      - PYTHONUNBUFFERED=1
    depends_on:
      db:
        condition: service_healthy
    ports:
      - "8001:8001"
    volumes:
      - static_volume:/admin_service/staticfiles
      - media_volume:/admin_service/mediafiles

  nginx:
      build: ./config/nginx
      restart: unless-stopped
      volumes:
        - static_volume:/admin_service/staticfiles
        - media_volume:/admin_service/mediafiles
      depends_on:
        - adminservice

  backend:
    container_name: "backend_without_traefik"
    build:
      context: ./backend/app
      dockerfile: Dockerfile
    env_file:
      - ./backend/.env
    environment:
      - PYTHONUNBUFFERED=1
      - PYTHONDONTWRITEBYTECODE=1
    depends_on:
      db:
        condition: service_healthy
    ports:
      - "8000:8000"
    
  frontend:
    container_name: "frontend_without_traefik"
    build:
      context: ./frontend
      dockerfile: Dockerfile
    restart: unless-stopped
    env_file:
      - .env
    ports:
      - "3000:3000"

volumes:
  pg_project:
  static_volume:
  media_volume: